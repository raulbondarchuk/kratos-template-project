// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/example/v1/example.proto

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Examplev1Service_ListExamples_FullMethodName      = "/api.example.v1.Examplev1Service/ListExamples"
	Examplev1Service_UpsertExample_FullMethodName     = "/api.example.v1.Examplev1Service/UpsertExample"
	Examplev1Service_DeleteExampleById_FullMethodName = "/api.example.v1.Examplev1Service/DeleteExampleById"
)

// Examplev1ServiceClient is the client API for Examplev1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// * API para gestión de plantillas (alertas/avisos).
type Examplev1ServiceClient interface {
	//* Lista todas las plantillas.
	//
	// **Descripción**
	// Devuelve el catálogo completo de plantillas definidas.
	//
	// **Parámetros**
	// _(sin parámetros)_
	//
	// **Respuestas**
	// - `200 OK`: `examples` + `meta.code = OK`
	// - `200` con error lógico: `meta.code != OK` y `meta.message`
	//
	// **Ejemplos**
	// `GET /example`
	ListExamples(ctx context.Context, in *ListExamplesRequest, opts ...grpc.CallOption) (*ListExamplesResponse, error)
	//* Crea o actualiza una plantilla (upsert).
	//
	// **Descripción**
	// Si `id` es `0` o no se envía → crea; si `id` > 0 → actualiza.
	//
	// **Parámetros (body JSON)**
	// - `id` (opcional, 0=create)
	// - `name` (**obligatorio**)
	//
	// **Respuestas**
	// - `200 OK`: `example` resultante + `meta.code = OK`
	// - `200` con error lógico: validación, duplicidad de `name`, etc.
	//
	// **Ejemplos**
	// `POST /example`
	// Body: `{ "name":"Example 1" }`
	UpsertExample(ctx context.Context, in *UpsertExampleRequest, opts ...grpc.CallOption) (*UpsertExampleResponse, error)
	//* Elimina una plantilla por ID.
	//
	// **Descripción**
	// Borra la plantilla indicada por `id`.
	//
	// **Parámetros (query)**
	// - `id` (**obligatorio**): ID interno
	//
	// **Respuestas**
	// - `200 OK`: `meta.code = OK`
	// - `200` con error lógico: `meta.code != OK` (p. ej., ID inexistente)
	//
	// **Ejemplos**
	// `DELETE /example?id=123`
	DeleteExampleById(ctx context.Context, in *DeleteExampleByIdRequest, opts ...grpc.CallOption) (*DeleteExampleByIdResponse, error)
}

type examplev1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExamplev1ServiceClient(cc grpc.ClientConnInterface) Examplev1ServiceClient {
	return &examplev1ServiceClient{cc}
}

func (c *examplev1ServiceClient) ListExamples(ctx context.Context, in *ListExamplesRequest, opts ...grpc.CallOption) (*ListExamplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExamplesResponse)
	err := c.cc.Invoke(ctx, Examplev1Service_ListExamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examplev1ServiceClient) UpsertExample(ctx context.Context, in *UpsertExampleRequest, opts ...grpc.CallOption) (*UpsertExampleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertExampleResponse)
	err := c.cc.Invoke(ctx, Examplev1Service_UpsertExample_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examplev1ServiceClient) DeleteExampleById(ctx context.Context, in *DeleteExampleByIdRequest, opts ...grpc.CallOption) (*DeleteExampleByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExampleByIdResponse)
	err := c.cc.Invoke(ctx, Examplev1Service_DeleteExampleById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Examplev1ServiceServer is the server API for Examplev1Service service.
// All implementations must embed UnimplementedExamplev1ServiceServer
// for forward compatibility.
//
// * API para gestión de plantillas (alertas/avisos).
type Examplev1ServiceServer interface {
	//* Lista todas las plantillas.
	//
	// **Descripción**
	// Devuelve el catálogo completo de plantillas definidas.
	//
	// **Parámetros**
	// _(sin parámetros)_
	//
	// **Respuestas**
	// - `200 OK`: `examples` + `meta.code = OK`
	// - `200` con error lógico: `meta.code != OK` y `meta.message`
	//
	// **Ejemplos**
	// `GET /example`
	ListExamples(context.Context, *ListExamplesRequest) (*ListExamplesResponse, error)
	//* Crea o actualiza una plantilla (upsert).
	//
	// **Descripción**
	// Si `id` es `0` o no se envía → crea; si `id` > 0 → actualiza.
	//
	// **Parámetros (body JSON)**
	// - `id` (opcional, 0=create)
	// - `name` (**obligatorio**)
	//
	// **Respuestas**
	// - `200 OK`: `example` resultante + `meta.code = OK`
	// - `200` con error lógico: validación, duplicidad de `name`, etc.
	//
	// **Ejemplos**
	// `POST /example`
	// Body: `{ "name":"Example 1" }`
	UpsertExample(context.Context, *UpsertExampleRequest) (*UpsertExampleResponse, error)
	//* Elimina una plantilla por ID.
	//
	// **Descripción**
	// Borra la plantilla indicada por `id`.
	//
	// **Parámetros (query)**
	// - `id` (**obligatorio**): ID interno
	//
	// **Respuestas**
	// - `200 OK`: `meta.code = OK`
	// - `200` con error lógico: `meta.code != OK` (p. ej., ID inexistente)
	//
	// **Ejemplos**
	// `DELETE /example?id=123`
	DeleteExampleById(context.Context, *DeleteExampleByIdRequest) (*DeleteExampleByIdResponse, error)
	mustEmbedUnimplementedExamplev1ServiceServer()
}

// UnimplementedExamplev1ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExamplev1ServiceServer struct{}

func (UnimplementedExamplev1ServiceServer) ListExamples(context.Context, *ListExamplesRequest) (*ListExamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExamples not implemented")
}
func (UnimplementedExamplev1ServiceServer) UpsertExample(context.Context, *UpsertExampleRequest) (*UpsertExampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertExample not implemented")
}
func (UnimplementedExamplev1ServiceServer) DeleteExampleById(context.Context, *DeleteExampleByIdRequest) (*DeleteExampleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExampleById not implemented")
}
func (UnimplementedExamplev1ServiceServer) mustEmbedUnimplementedExamplev1ServiceServer() {}
func (UnimplementedExamplev1ServiceServer) testEmbeddedByValue()                          {}

// UnsafeExamplev1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Examplev1ServiceServer will
// result in compilation errors.
type UnsafeExamplev1ServiceServer interface {
	mustEmbedUnimplementedExamplev1ServiceServer()
}

func RegisterExamplev1ServiceServer(s grpc.ServiceRegistrar, srv Examplev1ServiceServer) {
	// If the following call pancis, it indicates UnimplementedExamplev1ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Examplev1Service_ServiceDesc, srv)
}

func _Examplev1Service_ListExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Examplev1ServiceServer).ListExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Examplev1Service_ListExamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Examplev1ServiceServer).ListExamples(ctx, req.(*ListExamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Examplev1Service_UpsertExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Examplev1ServiceServer).UpsertExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Examplev1Service_UpsertExample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Examplev1ServiceServer).UpsertExample(ctx, req.(*UpsertExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Examplev1Service_DeleteExampleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExampleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Examplev1ServiceServer).DeleteExampleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Examplev1Service_DeleteExampleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Examplev1ServiceServer).DeleteExampleById(ctx, req.(*DeleteExampleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Examplev1Service_ServiceDesc is the grpc.ServiceDesc for Examplev1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Examplev1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.example.v1.Examplev1Service",
	HandlerType: (*Examplev1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListExamples",
			Handler:    _Examplev1Service_ListExamples_Handler,
		},
		{
			MethodName: "UpsertExample",
			Handler:    _Examplev1Service_UpsertExample_Handler,
		},
		{
			MethodName: "DeleteExampleById",
			Handler:    _Examplev1Service_DeleteExampleById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/example/v1/example.proto",
}
