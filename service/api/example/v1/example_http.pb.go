// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/example/v1/example.proto

package example

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationExamplev1ServiceMock = "/api.example.v1.Examplev1Service/Mock"

type Examplev1ServiceHTTPServer interface {
	// Mock Mock endpoint (no ops selected)
	Mock(context.Context, *MockRequest) (*MockResponse, error)
}

func RegisterExamplev1ServiceHTTPServer(s *http.Server, srv Examplev1ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/example/mock", _Examplev1Service_Mock0_HTTP_Handler(srv))
}

func _Examplev1Service_Mock0_HTTP_Handler(srv Examplev1ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MockRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExamplev1ServiceMock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Mock(ctx, req.(*MockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MockResponse)
		return ctx.Result(200, reply)
	}
}

type Examplev1ServiceHTTPClient interface {
	// Mock Mock endpoint (no ops selected)
	Mock(ctx context.Context, req *MockRequest, opts ...http.CallOption) (rsp *MockResponse, err error)
}

type Examplev1ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewExamplev1ServiceHTTPClient(client *http.Client) Examplev1ServiceHTTPClient {
	return &Examplev1ServiceHTTPClientImpl{client}
}

// Mock Mock endpoint (no ops selected)
func (c *Examplev1ServiceHTTPClientImpl) Mock(ctx context.Context, in *MockRequest, opts ...http.CallOption) (*MockResponse, error) {
	var out MockResponse
	pattern := "/v1/example/mock"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationExamplev1ServiceMock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
