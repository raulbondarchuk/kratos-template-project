// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: api/template/template.proto

package template

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTemplatesDeleteTemplateById = "/template.v1.Templates/DeleteTemplateById"
const OperationTemplatesListTemplates = "/template.v1.Templates/ListTemplates"
const OperationTemplatesUpsertTemplate = "/template.v1.Templates/UpsertTemplate"

type TemplatesHTTPServer interface {
	// DeleteTemplateById* Elimina una plantilla por ID.
	//
	// **Descripción**
	// Borra la plantilla indicada por `id`.
	//
	// **Parámetros (query)**
	// - `id` (**obligatorio**): ID interno
	//
	// **Respuestas**
	// - `200 OK`: `meta.code = OK`
	// - `200` con error lógico: `meta.code != OK` (p. ej., ID inexistente)
	//
	// **Ejemplos**
	// `DELETE /templates?id=123`
	DeleteTemplateById(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	// ListTemplates* Lista todas las plantillas.
	//
	// **Descripción**
	// Devuelve el catálogo completo de plantillas definidas.
	//
	// **Parámetros**
	// _(sin parámetros)_
	//
	// **Respuestas**
	// - `200 OK`: `templates` + `meta.code = OK`
	// - `200` con error lógico: `meta.code != OK` y `meta.message`
	//
	// **Ejemplos**
	// `GET /templates`
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	// UpsertTemplate* Crea o actualiza una plantilla (upsert).
	//
	// **Descripción**
	// Si `id` es `0` o no se envía → crea; si `id` > 0 → actualiza.
	//
	// **Parámetros (body JSON)**
	// - `id` (opcional, 0=create)
	// - `name` (**obligatorio**)
	//
	// **Respuestas**
	// - `200 OK`: `template` resultante + `meta.code = OK`
	// - `200` con error lógico: validación, duplicidad de `name`, etc.
	//
	// **Ejemplos**
	// `POST /templates`
	// Body: `{ "name":"Template 1" }`
	UpsertTemplate(context.Context, *UpsertTemplateRequest) (*UpsertTemplateResponse, error)
}

func RegisterTemplatesHTTPServer(s *http.Server, srv TemplatesHTTPServer) {
	r := s.Route("/")
	r.GET("/templates", _Templates_ListTemplates0_HTTP_Handler(srv))
	r.POST("/templates", _Templates_UpsertTemplate0_HTTP_Handler(srv))
	r.DELETE("/templates", _Templates_DeleteTemplateById0_HTTP_Handler(srv))
}

func _Templates_ListTemplates0_HTTP_Handler(srv TemplatesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTemplatesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplatesListTemplates)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTemplates(ctx, req.(*ListTemplatesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTemplatesResponse)
		return ctx.Result(200, reply)
	}
}

func _Templates_UpsertTemplate0_HTTP_Handler(srv TemplatesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpsertTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplatesUpsertTemplate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpsertTemplate(ctx, req.(*UpsertTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpsertTemplateResponse)
		return ctx.Result(200, reply)
	}
}

func _Templates_DeleteTemplateById0_HTTP_Handler(srv TemplatesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTemplateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplatesDeleteTemplateById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTemplateById(ctx, req.(*DeleteTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTemplateResponse)
		return ctx.Result(200, reply)
	}
}

type TemplatesHTTPClient interface {
	DeleteTemplateById(ctx context.Context, req *DeleteTemplateRequest, opts ...http.CallOption) (rsp *DeleteTemplateResponse, err error)
	ListTemplates(ctx context.Context, req *ListTemplatesRequest, opts ...http.CallOption) (rsp *ListTemplatesResponse, err error)
	UpsertTemplate(ctx context.Context, req *UpsertTemplateRequest, opts ...http.CallOption) (rsp *UpsertTemplateResponse, err error)
}

type TemplatesHTTPClientImpl struct {
	cc *http.Client
}

func NewTemplatesHTTPClient(client *http.Client) TemplatesHTTPClient {
	return &TemplatesHTTPClientImpl{client}
}

func (c *TemplatesHTTPClientImpl) DeleteTemplateById(ctx context.Context, in *DeleteTemplateRequest, opts ...http.CallOption) (*DeleteTemplateResponse, error) {
	var out DeleteTemplateResponse
	pattern := "/templates"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTemplatesDeleteTemplateById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TemplatesHTTPClientImpl) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...http.CallOption) (*ListTemplatesResponse, error) {
	var out ListTemplatesResponse
	pattern := "/templates"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTemplatesListTemplates))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TemplatesHTTPClientImpl) UpsertTemplate(ctx context.Context, in *UpsertTemplateRequest, opts ...http.CallOption) (*UpsertTemplateResponse, error) {
	var out UpsertTemplateResponse
	pattern := "/templates"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTemplatesUpsertTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
