// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/template/template.proto

package template

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Templates_ListTemplates_FullMethodName      = "/template.v1.Templates/ListTemplates"
	Templates_UpsertTemplate_FullMethodName     = "/template.v1.Templates/UpsertTemplate"
	Templates_DeleteTemplateById_FullMethodName = "/template.v1.Templates/DeleteTemplateById"
)

// TemplatesClient is the client API for Templates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// * API para gestión de plantillas (alertas/avisos).
type TemplatesClient interface {
	//* Lista todas las plantillas.
	//
	// **Descripción**
	// Devuelve el catálogo completo de plantillas definidas.
	//
	// **Parámetros**
	// _(sin parámetros)_
	//
	// **Respuestas**
	// - `200 OK`: `templates` + `meta.code = OK`
	// - `200` con error lógico: `meta.code != OK` y `meta.message`
	//
	// **Ejemplos**
	// `GET /templates`
	ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	//* Crea o actualiza una plantilla (upsert).
	//
	// **Descripción**
	// Si `id` es `0` o no se envía → crea; si `id` > 0 → actualiza.
	//
	// **Parámetros (body JSON)**
	// - `id` (opcional, 0=create)
	// - `name` (**obligatorio**)
	//
	// **Respuestas**
	// - `200 OK`: `template` resultante + `meta.code = OK`
	// - `200` con error lógico: validación, duplicidad de `name`, etc.
	//
	// **Ejemplos**
	// `POST /templates`
	// Body: `{ "name":"Template 1" }`
	UpsertTemplate(ctx context.Context, in *UpsertTemplateRequest, opts ...grpc.CallOption) (*UpsertTemplateResponse, error)
	//* Elimina una plantilla por ID.
	//
	// **Descripción**
	// Borra la plantilla indicada por `id`.
	//
	// **Parámetros (query)**
	// - `id` (**obligatorio**): ID interno
	//
	// **Respuestas**
	// - `200 OK`: `meta.code = OK`
	// - `200` con error lógico: `meta.code != OK` (p. ej., ID inexistente)
	//
	// **Ejemplos**
	// `DELETE /templates?id=123`
	DeleteTemplateById(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error)
}

type templatesClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplatesClient(cc grpc.ClientConnInterface) TemplatesClient {
	return &templatesClient{cc}
}

func (c *templatesClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, Templates_ListTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) UpsertTemplate(ctx context.Context, in *UpsertTemplateRequest, opts ...grpc.CallOption) (*UpsertTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertTemplateResponse)
	err := c.cc.Invoke(ctx, Templates_UpsertTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) DeleteTemplateById(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTemplateResponse)
	err := c.cc.Invoke(ctx, Templates_DeleteTemplateById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplatesServer is the server API for Templates service.
// All implementations must embed UnimplementedTemplatesServer
// for forward compatibility.
//
// * API para gestión de plantillas (alertas/avisos).
type TemplatesServer interface {
	//* Lista todas las plantillas.
	//
	// **Descripción**
	// Devuelve el catálogo completo de plantillas definidas.
	//
	// **Parámetros**
	// _(sin parámetros)_
	//
	// **Respuestas**
	// - `200 OK`: `templates` + `meta.code = OK`
	// - `200` con error lógico: `meta.code != OK` y `meta.message`
	//
	// **Ejemplos**
	// `GET /templates`
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	//* Crea o actualiza una plantilla (upsert).
	//
	// **Descripción**
	// Si `id` es `0` o no se envía → crea; si `id` > 0 → actualiza.
	//
	// **Parámetros (body JSON)**
	// - `id` (opcional, 0=create)
	// - `name` (**obligatorio**)
	//
	// **Respuestas**
	// - `200 OK`: `template` resultante + `meta.code = OK`
	// - `200` con error lógico: validación, duplicidad de `name`, etc.
	//
	// **Ejemplos**
	// `POST /templates`
	// Body: `{ "name":"Template 1" }`
	UpsertTemplate(context.Context, *UpsertTemplateRequest) (*UpsertTemplateResponse, error)
	//* Elimina una plantilla por ID.
	//
	// **Descripción**
	// Borra la plantilla indicada por `id`.
	//
	// **Parámetros (query)**
	// - `id` (**obligatorio**): ID interno
	//
	// **Respuestas**
	// - `200 OK`: `meta.code = OK`
	// - `200` con error lógico: `meta.code != OK` (p. ej., ID inexistente)
	//
	// **Ejemplos**
	// `DELETE /templates?id=123`
	DeleteTemplateById(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	mustEmbedUnimplementedTemplatesServer()
}

// UnimplementedTemplatesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTemplatesServer struct{}

func (UnimplementedTemplatesServer) ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedTemplatesServer) UpsertTemplate(context.Context, *UpsertTemplateRequest) (*UpsertTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTemplate not implemented")
}
func (UnimplementedTemplatesServer) DeleteTemplateById(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateById not implemented")
}
func (UnimplementedTemplatesServer) mustEmbedUnimplementedTemplatesServer() {}
func (UnimplementedTemplatesServer) testEmbeddedByValue()                   {}

// UnsafeTemplatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplatesServer will
// result in compilation errors.
type UnsafeTemplatesServer interface {
	mustEmbedUnimplementedTemplatesServer()
}

func RegisterTemplatesServer(s grpc.ServiceRegistrar, srv TemplatesServer) {
	// If the following call pancis, it indicates UnimplementedTemplatesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Templates_ServiceDesc, srv)
}

func _Templates_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).ListTemplates(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_UpsertTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).UpsertTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_UpsertTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).UpsertTemplate(ctx, req.(*UpsertTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_DeleteTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).DeleteTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_DeleteTemplateById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).DeleteTemplateById(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Templates_ServiceDesc is the grpc.ServiceDesc for Templates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Templates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template.v1.Templates",
	HandlerType: (*TemplatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTemplates",
			Handler:    _Templates_ListTemplates_Handler,
		},
		{
			MethodName: "UpsertTemplate",
			Handler:    _Templates_UpsertTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplateById",
			Handler:    _Templates_DeleteTemplateById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/template/template.proto",
}
