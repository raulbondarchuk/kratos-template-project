// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/prueba/v1/prueba.proto

package prueba

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PruebaService_FindPruebas_FullMethodName      = "/api.prueba.v1.PruebaService/FindPruebas"
	PruebaService_UpsertPrueba_FullMethodName     = "/api.prueba.v1.PruebaService/UpsertPrueba"
	PruebaService_DeletePruebaById_FullMethodName = "/api.prueba.v1.PruebaService/DeletePruebaById"
)

// PruebaServiceClient is the client API for PruebaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Prueba Service: find, upsert, delete
type PruebaServiceClient interface {
	// GET /pruebas - list or search by filters
	FindPruebas(ctx context.Context, in *FindPruebasRequest, opts ...grpc.CallOption) (*FindPruebasResponse, error)
	// POST /pruebas - create or update (id=0 create, >0 update)
	UpsertPrueba(ctx context.Context, in *UpsertPruebaRequest, opts ...grpc.CallOption) (*UpsertPruebaResponse, error)
	// DELETE /pruebas?id=123 - delete by id
	DeletePruebaById(ctx context.Context, in *DeletePruebaByIdRequest, opts ...grpc.CallOption) (*DeletePruebaByIdResponse, error)
}

type pruebaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPruebaServiceClient(cc grpc.ClientConnInterface) PruebaServiceClient {
	return &pruebaServiceClient{cc}
}

func (c *pruebaServiceClient) FindPruebas(ctx context.Context, in *FindPruebasRequest, opts ...grpc.CallOption) (*FindPruebasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindPruebasResponse)
	err := c.cc.Invoke(ctx, PruebaService_FindPruebas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruebaServiceClient) UpsertPrueba(ctx context.Context, in *UpsertPruebaRequest, opts ...grpc.CallOption) (*UpsertPruebaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertPruebaResponse)
	err := c.cc.Invoke(ctx, PruebaService_UpsertPrueba_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruebaServiceClient) DeletePruebaById(ctx context.Context, in *DeletePruebaByIdRequest, opts ...grpc.CallOption) (*DeletePruebaByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePruebaByIdResponse)
	err := c.cc.Invoke(ctx, PruebaService_DeletePruebaById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PruebaServiceServer is the server API for PruebaService service.
// All implementations must embed UnimplementedPruebaServiceServer
// for forward compatibility.
//
// Prueba Service: find, upsert, delete
type PruebaServiceServer interface {
	// GET /pruebas - list or search by filters
	FindPruebas(context.Context, *FindPruebasRequest) (*FindPruebasResponse, error)
	// POST /pruebas - create or update (id=0 create, >0 update)
	UpsertPrueba(context.Context, *UpsertPruebaRequest) (*UpsertPruebaResponse, error)
	// DELETE /pruebas?id=123 - delete by id
	DeletePruebaById(context.Context, *DeletePruebaByIdRequest) (*DeletePruebaByIdResponse, error)
	mustEmbedUnimplementedPruebaServiceServer()
}

// UnimplementedPruebaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPruebaServiceServer struct{}

func (UnimplementedPruebaServiceServer) FindPruebas(context.Context, *FindPruebasRequest) (*FindPruebasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPruebas not implemented")
}
func (UnimplementedPruebaServiceServer) UpsertPrueba(context.Context, *UpsertPruebaRequest) (*UpsertPruebaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPrueba not implemented")
}
func (UnimplementedPruebaServiceServer) DeletePruebaById(context.Context, *DeletePruebaByIdRequest) (*DeletePruebaByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePruebaById not implemented")
}
func (UnimplementedPruebaServiceServer) mustEmbedUnimplementedPruebaServiceServer() {}
func (UnimplementedPruebaServiceServer) testEmbeddedByValue()                       {}

// UnsafePruebaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PruebaServiceServer will
// result in compilation errors.
type UnsafePruebaServiceServer interface {
	mustEmbedUnimplementedPruebaServiceServer()
}

func RegisterPruebaServiceServer(s grpc.ServiceRegistrar, srv PruebaServiceServer) {
	// If the following call pancis, it indicates UnimplementedPruebaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PruebaService_ServiceDesc, srv)
}

func _PruebaService_FindPruebas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPruebasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruebaServiceServer).FindPruebas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruebaService_FindPruebas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruebaServiceServer).FindPruebas(ctx, req.(*FindPruebasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruebaService_UpsertPrueba_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPruebaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruebaServiceServer).UpsertPrueba(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruebaService_UpsertPrueba_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruebaServiceServer).UpsertPrueba(ctx, req.(*UpsertPruebaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruebaService_DeletePruebaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePruebaByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruebaServiceServer).DeletePruebaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruebaService_DeletePruebaById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruebaServiceServer).DeletePruebaById(ctx, req.(*DeletePruebaByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PruebaService_ServiceDesc is the grpc.ServiceDesc for PruebaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PruebaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.prueba.v1.PruebaService",
	HandlerType: (*PruebaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindPruebas",
			Handler:    _PruebaService_FindPruebas_Handler,
		},
		{
			MethodName: "UpsertPrueba",
			Handler:    _PruebaService_UpsertPrueba_Handler,
		},
		{
			MethodName: "DeletePruebaById",
			Handler:    _PruebaService_DeletePruebaById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/prueba/v1/prueba.proto",
}
