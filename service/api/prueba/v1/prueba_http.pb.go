// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/prueba/v1/prueba.proto

package prueba

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPruebav1ServiceFindPruebas = "/api.prueba.v1.Pruebav1Service/FindPruebas"
const OperationPruebav1ServiceUpsertPrueba = "/api.prueba.v1.Pruebav1Service/UpsertPrueba"

type Pruebav1ServiceHTTPServer interface {
	// FindPruebas GET /v1/prueba - list or search by filters
	FindPruebas(context.Context, *FindPruebasRequest) (*FindPruebasResponse, error)
	// UpsertPrueba POST /v1/prueba - create or update (id=0 create, >0 update)
	UpsertPrueba(context.Context, *UpsertPruebaRequest) (*UpsertPruebaResponse, error)
}

func RegisterPruebav1ServiceHTTPServer(s *http.Server, srv Pruebav1ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/prueba", _Pruebav1Service_FindPruebas0_HTTP_Handler(srv))
	r.POST("/v1/prueba", _Pruebav1Service_UpsertPrueba0_HTTP_Handler(srv))
}

func _Pruebav1Service_FindPruebas0_HTTP_Handler(srv Pruebav1ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindPruebasRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPruebav1ServiceFindPruebas)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindPruebas(ctx, req.(*FindPruebasRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindPruebasResponse)
		return ctx.Result(200, reply)
	}
}

func _Pruebav1Service_UpsertPrueba0_HTTP_Handler(srv Pruebav1ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpsertPruebaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPruebav1ServiceUpsertPrueba)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpsertPrueba(ctx, req.(*UpsertPruebaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpsertPruebaResponse)
		return ctx.Result(200, reply)
	}
}

type Pruebav1ServiceHTTPClient interface {
	// FindPruebas GET /v1/prueba - list or search by filters
	FindPruebas(ctx context.Context, req *FindPruebasRequest, opts ...http.CallOption) (rsp *FindPruebasResponse, err error)
	// UpsertPrueba POST /v1/prueba - create or update (id=0 create, >0 update)
	UpsertPrueba(ctx context.Context, req *UpsertPruebaRequest, opts ...http.CallOption) (rsp *UpsertPruebaResponse, err error)
}

type Pruebav1ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPruebav1ServiceHTTPClient(client *http.Client) Pruebav1ServiceHTTPClient {
	return &Pruebav1ServiceHTTPClientImpl{client}
}

// FindPruebas GET /v1/prueba - list or search by filters
func (c *Pruebav1ServiceHTTPClientImpl) FindPruebas(ctx context.Context, in *FindPruebasRequest, opts ...http.CallOption) (*FindPruebasResponse, error) {
	var out FindPruebasResponse
	pattern := "/v1/prueba"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPruebav1ServiceFindPruebas))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpsertPrueba POST /v1/prueba - create or update (id=0 create, >0 update)
func (c *Pruebav1ServiceHTTPClientImpl) UpsertPrueba(ctx context.Context, in *UpsertPruebaRequest, opts ...http.CallOption) (*UpsertPruebaResponse, error) {
	var out UpsertPruebaResponse
	pattern := "/v1/prueba"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPruebav1ServiceUpsertPrueba))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
