// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/prueba/v1/prueba.proto

package prueba

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPruebaServiceDeletePruebaById = "/api.prueba.v1.PruebaService/DeletePruebaById"
const OperationPruebaServiceFindPruebas = "/api.prueba.v1.PruebaService/FindPruebas"
const OperationPruebaServiceUpsertPrueba = "/api.prueba.v1.PruebaService/UpsertPrueba"

type PruebaServiceHTTPServer interface {
	// DeletePruebaById* Elimina prueba por ID.
	//
	// Parametros (query)
	// - 'id' (obligatorio): ID interno
	//
	// Respuestas
	// - 200 OK: 'meta.code = RESPONSE_CODE_OK'
	// - 200 con error logico: 'meta.code != RESPONSE_CODE_OK'
	//
	// Ejemplos
	// DELETE /pruebas?id=123
	DeletePruebaById(context.Context, *DeletePruebaByIdRequest) (*DeletePruebaByIdResponse, error)
	// FindPruebas* Lista o busca pruebas.
	//
	// Descripcion
	// Devuelve lista de pruebas. Si hay filtros, se aplican.
	//
	// Parametros (query)
	// - 'id' (opcional)
	// - 'name' (opcional)
	//
	// Respuestas
	// - 200 OK: 'items' + 'meta.code = RESPONSE_CODE_OK'
	// - 200 con error logico: 'meta.code != RESPONSE_CODE_OK' y 'meta.message'
	//
	// Ejemplos
	// GET /pruebas
	// GET /pruebas?id=1
	FindPruebas(context.Context, *FindPruebasRequest) (*FindPruebasResponse, error)
	// UpsertPrueba* Crea o actualiza (upsert) prueba.
	//
	// Descripcion
	// Si 'id' es 0 o no se envia -> crea; si 'id' > 0 -> actualiza.
	//
	// Parametros (body JSON)
	// - 'id' (opcional, 0=create)
	// - 'name' (obligatorio)
	//
	// Respuestas
	// - 200 OK: 'item' resultante + 'meta.code = RESPONSE_CODE_OK'
	// - 200 con error logico: validacion o duplicidad
	//
	// Ejemplos
	// POST /pruebas
	// Body: { "name":"Prueba 1" }
	UpsertPrueba(context.Context, *UpsertPruebaRequest) (*UpsertPruebaResponse, error)
}

func RegisterPruebaServiceHTTPServer(s *http.Server, srv PruebaServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/pruebas", _PruebaService_FindPruebas0_HTTP_Handler(srv))
	r.POST("/pruebas", _PruebaService_UpsertPrueba0_HTTP_Handler(srv))
	r.DELETE("/pruebas", _PruebaService_DeletePruebaById0_HTTP_Handler(srv))
}

func _PruebaService_FindPruebas0_HTTP_Handler(srv PruebaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindPruebasRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPruebaServiceFindPruebas)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindPruebas(ctx, req.(*FindPruebasRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindPruebasResponse)
		return ctx.Result(200, reply)
	}
}

func _PruebaService_UpsertPrueba0_HTTP_Handler(srv PruebaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpsertPruebaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPruebaServiceUpsertPrueba)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpsertPrueba(ctx, req.(*UpsertPruebaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpsertPruebaResponse)
		return ctx.Result(200, reply)
	}
}

func _PruebaService_DeletePruebaById0_HTTP_Handler(srv PruebaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePruebaByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPruebaServiceDeletePruebaById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePruebaById(ctx, req.(*DeletePruebaByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePruebaByIdResponse)
		return ctx.Result(200, reply)
	}
}

type PruebaServiceHTTPClient interface {
	// DeletePruebaById* Elimina prueba por ID.
	//
	// Parametros (query)
	// - 'id' (obligatorio): ID interno
	//
	// Respuestas
	// - 200 OK: 'meta.code = RESPONSE_CODE_OK'
	// - 200 con error logico: 'meta.code != RESPONSE_CODE_OK'
	//
	// Ejemplos
	// DELETE /pruebas?id=123
	DeletePruebaById(ctx context.Context, req *DeletePruebaByIdRequest, opts ...http.CallOption) (rsp *DeletePruebaByIdResponse, err error)
	// FindPruebas* Lista o busca pruebas.
	//
	// Descripcion
	// Devuelve lista de pruebas. Si hay filtros, se aplican.
	//
	// Parametros (query)
	// - 'id' (opcional)
	// - 'name' (opcional)
	//
	// Respuestas
	// - 200 OK: 'items' + 'meta.code = RESPONSE_CODE_OK'
	// - 200 con error logico: 'meta.code != RESPONSE_CODE_OK' y 'meta.message'
	//
	// Ejemplos
	// GET /pruebas
	// GET /pruebas?id=1
	FindPruebas(ctx context.Context, req *FindPruebasRequest, opts ...http.CallOption) (rsp *FindPruebasResponse, err error)
	// UpsertPrueba* Crea o actualiza (upsert) prueba.
	//
	// Descripcion
	// Si 'id' es 0 o no se envia -> crea; si 'id' > 0 -> actualiza.
	//
	// Parametros (body JSON)
	// - 'id' (opcional, 0=create)
	// - 'name' (obligatorio)
	//
	// Respuestas
	// - 200 OK: 'item' resultante + 'meta.code = RESPONSE_CODE_OK'
	// - 200 con error logico: validacion o duplicidad
	//
	// Ejemplos
	// POST /pruebas
	// Body: { "name":"Prueba 1" }
	UpsertPrueba(ctx context.Context, req *UpsertPruebaRequest, opts ...http.CallOption) (rsp *UpsertPruebaResponse, err error)
}

type PruebaServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPruebaServiceHTTPClient(client *http.Client) PruebaServiceHTTPClient {
	return &PruebaServiceHTTPClientImpl{client}
}

// DeletePruebaById* Elimina prueba por ID.
//
// Parametros (query)
// - 'id' (obligatorio): ID interno
//
// Respuestas
// - 200 OK: 'meta.code = RESPONSE_CODE_OK'
// - 200 con error logico: 'meta.code != RESPONSE_CODE_OK'
//
// Ejemplos
// DELETE /pruebas?id=123
func (c *PruebaServiceHTTPClientImpl) DeletePruebaById(ctx context.Context, in *DeletePruebaByIdRequest, opts ...http.CallOption) (*DeletePruebaByIdResponse, error) {
	var out DeletePruebaByIdResponse
	pattern := "/pruebas"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPruebaServiceDeletePruebaById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// FindPruebas* Lista o busca pruebas.
//
// Descripcion
// Devuelve lista de pruebas. Si hay filtros, se aplican.
//
// Parametros (query)
// - 'id' (opcional)
// - 'name' (opcional)
//
// Respuestas
// - 200 OK: 'items' + 'meta.code = RESPONSE_CODE_OK'
// - 200 con error logico: 'meta.code != RESPONSE_CODE_OK' y 'meta.message'
//
// Ejemplos
// GET /pruebas
// GET /pruebas?id=1
func (c *PruebaServiceHTTPClientImpl) FindPruebas(ctx context.Context, in *FindPruebasRequest, opts ...http.CallOption) (*FindPruebasResponse, error) {
	var out FindPruebasResponse
	pattern := "/pruebas"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPruebaServiceFindPruebas))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpsertPrueba* Crea o actualiza (upsert) prueba.
//
// Descripcion
// Si 'id' es 0 o no se envia -> crea; si 'id' > 0 -> actualiza.
//
// Parametros (body JSON)
// - 'id' (opcional, 0=create)
// - 'name' (obligatorio)
//
// Respuestas
// - 200 OK: 'item' resultante + 'meta.code = RESPONSE_CODE_OK'
// - 200 con error logico: validacion o duplicidad
//
// Ejemplos
// POST /pruebas
// Body: { "name":"Prueba 1" }
func (c *PruebaServiceHTTPClientImpl) UpsertPrueba(ctx context.Context, in *UpsertPruebaRequest, opts ...http.CallOption) (*UpsertPruebaResponse, error) {
	var out UpsertPruebaResponse
	pattern := "/pruebas"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPruebaServiceUpsertPrueba))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
