name: Build & Push

on:
  push:
    branches: [ "main", "master" ]

env:
  GO_VERSION: "1.25.0"
  REGISTRY: "registry.liftel.es:5000"
  CONFIG_FILE: "configs/config.yaml"
  BIN_FILE: "service.linux"

defaults:
  run:
    working-directory: ./service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (manual)
        working-directory: .
        env:
          GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          SHA: ${{ github.sha }}
        run: |
          set -e
          git clone "https://x-access-token:${GIT_TOKEN}@github.com/${REPO}.git" .
          git fetch --no-tags origin "${SHA}"
          git checkout --progress --force "${SHA}"
          git submodule update --init --recursive
          git fetch --tags --force origin
          git config --global --add safe.directory "$PWD"

      - name: Install Go (manual)
        run: |
          curl -sSL "https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz" -o /tmp/go.tgz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf /tmp/go.tgz
          echo "/usr/local/go/bin" >> "$GITHUB_PATH"
          echo "$HOME/go/bin" >> "$GITHUB_PATH"
          go version

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Derive app name and version
        id: meta
        shell: bash
        run: |
          set -e
          NAME=$(yq -r '.app.name // "service"' "${CONFIG_FILE}" || echo service)
          CFG_VER=$(yq -r '.app.version // ""' "${CONFIG_FILE}" || true)
          GIT_VER=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          RAW_VER=""
          if [ -n "$GIT_VER" ]; then RAW_VER="$GIT_VER";
          elif [ -n "$CFG_VER" ]; then RAW_VER="$CFG_VER";
          else RAW_VER="v0.0.0"; fi
          if [[ "$RAW_VER" =~ ^v(.+)$ ]]; then TAG="${BASH_REMATCH[1]}"; else TAG="$RAW_VER"; fi
          [ -n "$TAG" ] || TAG="0.0.0-${GITHUB_SHA::7}"

          IMAGE="${REGISTRY}/${NAME}:${TAG}"
          echo "name=$NAME"   >> "$GITHUB_OUTPUT"
          echo "version=$TAG" >> "$GITHUB_OUTPUT"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"
          echo "IMAGE=$IMAGE" >> "$GITHUB_ENV"

      - name: Build Linux binary
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o "${BIN_FILE}" ./cmd/service

      - name: Ensure config folder
        run: mkdir -p configs

      - name: Create .env from secrets
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        shell: bash
        run: |
          : > .env
          if [ -n "$ENV_FILE" ]; then printf '%s\n' "$ENV_FILE" > .env; fi

      - name: Check build context
        run: |
          ls -la
          test -f "${BIN_FILE}" || (echo "Binary ${BIN_FILE} not found"; exit 1)
          test -f Dockerfile   || (echo "Dockerfile not found"; exit 1)

      - name: Docker login (private registry)
        run: |
          echo "${{ secrets.REGISTRY_PASS }}" | docker login "${REGISTRY}" -u "${{ secrets.REGISTRY_LOGIN }}" --password-stdin

      - name: Build image
        run: docker build --build-arg BIN_FILE="${BIN_FILE}" -t "${IMAGE}" .

      # - name: Push image
      #   run: docker push "${IMAGE}"

      - name: Summary
        run: |
          echo "Pushed image: ${IMAGE}"
          echo "::notice title=Image::${IMAGE}"
